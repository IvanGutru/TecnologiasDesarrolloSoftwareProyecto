//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MessageServiceTests1.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IAdministradorCuenta")]
    public interface IAdministradorCuenta {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdministradorCuenta/IniciarSesion", ReplyAction="http://tempuri.org/IAdministradorCuenta/IniciarSesionResponse")]
        MessageService.Jugador IniciarSesion(MessageService.Cuenta cuenta);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdministradorCuenta/IniciarSesion", ReplyAction="http://tempuri.org/IAdministradorCuenta/IniciarSesionResponse")]
        System.Threading.Tasks.Task<MessageService.Jugador> IniciarSesionAsync(MessageService.Cuenta cuenta);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdministradorCuenta/RegistrarJugador", ReplyAction="http://tempuri.org/IAdministradorCuenta/RegistrarJugadorResponse")]
        bool RegistrarJugador(MessageService.Jugador jugador, MessageService.Cuenta cuenta);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdministradorCuenta/RegistrarJugador", ReplyAction="http://tempuri.org/IAdministradorCuenta/RegistrarJugadorResponse")]
        System.Threading.Tasks.Task<bool> RegistrarJugadorAsync(MessageService.Jugador jugador, MessageService.Cuenta cuenta);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdministradorCuenta/ActivarCuentaJugador", ReplyAction="http://tempuri.org/IAdministradorCuenta/ActivarCuentaJugadorResponse")]
        bool ActivarCuentaJugador(MessageService.Cuenta cuenta, string codigo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdministradorCuenta/ActivarCuentaJugador", ReplyAction="http://tempuri.org/IAdministradorCuenta/ActivarCuentaJugadorResponse")]
        System.Threading.Tasks.Task<bool> ActivarCuentaJugadorAsync(MessageService.Cuenta cuenta, string codigo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdministradorCuenta/VerificarCuenta", ReplyAction="http://tempuri.org/IAdministradorCuenta/VerificarCuentaResponse")]
        bool VerificarCuenta(MessageService.Cuenta cuenta);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdministradorCuenta/VerificarCuenta", ReplyAction="http://tempuri.org/IAdministradorCuenta/VerificarCuentaResponse")]
        System.Threading.Tasks.Task<bool> VerificarCuentaAsync(MessageService.Cuenta cuenta);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdministradorCuenta/VerificarApodo", ReplyAction="http://tempuri.org/IAdministradorCuenta/VerificarApodoResponse")]
        bool VerificarApodo(MessageService.Jugador jugador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdministradorCuenta/VerificarApodo", ReplyAction="http://tempuri.org/IAdministradorCuenta/VerificarApodoResponse")]
        System.Threading.Tasks.Task<bool> VerificarApodoAsync(MessageService.Jugador jugador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdministradorCuenta/EnviarCorreo", ReplyAction="http://tempuri.org/IAdministradorCuenta/EnviarCorreoResponse")]
        bool EnviarCorreo(MessageService.Cuenta cuenta);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdministradorCuenta/EnviarCorreo", ReplyAction="http://tempuri.org/IAdministradorCuenta/EnviarCorreoResponse")]
        System.Threading.Tasks.Task<bool> EnviarCorreoAsync(MessageService.Cuenta cuenta);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdministradorCuenta/ConsultarPuntajesPropios", ReplyAction="http://tempuri.org/IAdministradorCuenta/ConsultarPuntajesPropiosResponse")]
        MessageService.FilaTablaPuntajes[] ConsultarPuntajesPropios(MessageService.Jugador jugador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdministradorCuenta/ConsultarPuntajesPropios", ReplyAction="http://tempuri.org/IAdministradorCuenta/ConsultarPuntajesPropiosResponse")]
        System.Threading.Tasks.Task<MessageService.FilaTablaPuntajes[]> ConsultarPuntajesPropiosAsync(MessageService.Jugador jugador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdministradorCuenta/ConsultarMejoresPuntajes", ReplyAction="http://tempuri.org/IAdministradorCuenta/ConsultarMejoresPuntajesResponse")]
        MessageService.FilaTablaPuntajes[] ConsultarMejoresPuntajes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdministradorCuenta/ConsultarMejoresPuntajes", ReplyAction="http://tempuri.org/IAdministradorCuenta/ConsultarMejoresPuntajesResponse")]
        System.Threading.Tasks.Task<MessageService.FilaTablaPuntajes[]> ConsultarMejoresPuntajesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAdministradorCuentaChannel : MessageServiceTests1.ServiceReference1.IAdministradorCuenta, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AdministradorCuentaClient : System.ServiceModel.ClientBase<MessageServiceTests1.ServiceReference1.IAdministradorCuenta>, MessageServiceTests1.ServiceReference1.IAdministradorCuenta {
        
        public AdministradorCuentaClient() {
        }
        
        public AdministradorCuentaClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AdministradorCuentaClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AdministradorCuentaClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AdministradorCuentaClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public MessageService.Jugador IniciarSesion(MessageService.Cuenta cuenta) {
            return base.Channel.IniciarSesion(cuenta);
        }
        
        public System.Threading.Tasks.Task<MessageService.Jugador> IniciarSesionAsync(MessageService.Cuenta cuenta) {
            return base.Channel.IniciarSesionAsync(cuenta);
        }
        
        public bool RegistrarJugador(MessageService.Jugador jugador, MessageService.Cuenta cuenta) {
            return base.Channel.RegistrarJugador(jugador, cuenta);
        }
        
        public System.Threading.Tasks.Task<bool> RegistrarJugadorAsync(MessageService.Jugador jugador, MessageService.Cuenta cuenta) {
            return base.Channel.RegistrarJugadorAsync(jugador, cuenta);
        }
        
        public bool ActivarCuentaJugador(MessageService.Cuenta cuenta, string codigo) {
            return base.Channel.ActivarCuentaJugador(cuenta, codigo);
        }
        
        public System.Threading.Tasks.Task<bool> ActivarCuentaJugadorAsync(MessageService.Cuenta cuenta, string codigo) {
            return base.Channel.ActivarCuentaJugadorAsync(cuenta, codigo);
        }
        
        public bool VerificarCuenta(MessageService.Cuenta cuenta) {
            return base.Channel.VerificarCuenta(cuenta);
        }
        
        public System.Threading.Tasks.Task<bool> VerificarCuentaAsync(MessageService.Cuenta cuenta) {
            return base.Channel.VerificarCuentaAsync(cuenta);
        }
        
        public bool VerificarApodo(MessageService.Jugador jugador) {
            return base.Channel.VerificarApodo(jugador);
        }
        
        public System.Threading.Tasks.Task<bool> VerificarApodoAsync(MessageService.Jugador jugador) {
            return base.Channel.VerificarApodoAsync(jugador);
        }
        
        public bool EnviarCorreo(MessageService.Cuenta cuenta) {
            return base.Channel.EnviarCorreo(cuenta);
        }
        
        public System.Threading.Tasks.Task<bool> EnviarCorreoAsync(MessageService.Cuenta cuenta) {
            return base.Channel.EnviarCorreoAsync(cuenta);
        }
        
        public MessageService.FilaTablaPuntajes[] ConsultarPuntajesPropios(MessageService.Jugador jugador) {
            return base.Channel.ConsultarPuntajesPropios(jugador);
        }
        
        public System.Threading.Tasks.Task<MessageService.FilaTablaPuntajes[]> ConsultarPuntajesPropiosAsync(MessageService.Jugador jugador) {
            return base.Channel.ConsultarPuntajesPropiosAsync(jugador);
        }
        
        public MessageService.FilaTablaPuntajes[] ConsultarMejoresPuntajes() {
            return base.Channel.ConsultarMejoresPuntajes();
        }
        
        public System.Threading.Tasks.Task<MessageService.FilaTablaPuntajes[]> ConsultarMejoresPuntajesAsync() {
            return base.Channel.ConsultarMejoresPuntajesAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IAdministradorMultijugador", CallbackContract=typeof(MessageServiceTests1.ServiceReference1.IAdministradorMultijugadorCallback))]
    public interface IAdministradorMultijugador {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdministradorMultijugador/CrearSala", ReplyAction="http://tempuri.org/IAdministradorMultijugador/CrearSalaResponse")]
        int CrearSala(MessageService.Sala sala);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdministradorMultijugador/CrearSala", ReplyAction="http://tempuri.org/IAdministradorMultijugador/CrearSalaResponse")]
        System.Threading.Tasks.Task<int> CrearSalaAsync(MessageService.Sala sala);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdministradorMultijugador/ConsultarSalasDisponibles", ReplyAction="http://tempuri.org/IAdministradorMultijugador/ConsultarSalasDisponiblesResponse")]
        MessageService.Sala[] ConsultarSalasDisponibles();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdministradorMultijugador/ConsultarSalasDisponibles", ReplyAction="http://tempuri.org/IAdministradorMultijugador/ConsultarSalasDisponiblesResponse")]
        System.Threading.Tasks.Task<MessageService.Sala[]> ConsultarSalasDisponiblesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdministradorMultijugador/ConsultarJugadoresSala", ReplyAction="http://tempuri.org/IAdministradorMultijugador/ConsultarJugadoresSalaResponse")]
        string[] ConsultarJugadoresSala(int idSala);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdministradorMultijugador/ConsultarJugadoresSala", ReplyAction="http://tempuri.org/IAdministradorMultijugador/ConsultarJugadoresSalaResponse")]
        System.Threading.Tasks.Task<string[]> ConsultarJugadoresSalaAsync(int idSala);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAdministradorMultijugador/UnirseSala")]
        void UnirseSala(int idSala, MessageService.Jugador jugador);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAdministradorMultijugador/UnirseSala")]
        System.Threading.Tasks.Task UnirseSalaAsync(int idSala, MessageService.Jugador jugador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdministradorMultijugador/ValidarSala", ReplyAction="http://tempuri.org/IAdministradorMultijugador/ValidarSalaResponse")]
        bool ValidarSala(int idSala);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdministradorMultijugador/ValidarSala", ReplyAction="http://tempuri.org/IAdministradorMultijugador/ValidarSalaResponse")]
        System.Threading.Tasks.Task<bool> ValidarSalaAsync(int idSala);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAdministradorMultijugador/EnviarMensaje")]
        void EnviarMensaje(int idSala, string mensaje);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAdministradorMultijugador/EnviarMensaje")]
        System.Threading.Tasks.Task EnviarMensajeAsync(int idSala, string mensaje);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAdministradorMultijugador/SalirChat")]
        void SalirChat(int idSala);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAdministradorMultijugador/SalirChat")]
        System.Threading.Tasks.Task SalirChatAsync(int idSala);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAdministradorMultijugador/IniciarJuego")]
        void IniciarJuego(int idSala);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAdministradorMultijugador/IniciarJuego")]
        System.Threading.Tasks.Task IniciarJuegoAsync(int idSala);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAdministradorMultijugador/UnirseJuego")]
        void UnirseJuego(int idSala, MessageService.Jugador jugador);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAdministradorMultijugador/UnirseJuego")]
        System.Threading.Tasks.Task UnirseJuegoAsync(int idSala, MessageService.Jugador jugador);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAdministradorMultijugador/EnviarMensajeJuego")]
        void EnviarMensajeJuego(int idSala, string mensaje);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAdministradorMultijugador/EnviarMensajeJuego")]
        System.Threading.Tasks.Task EnviarMensajeJuegoAsync(int idSala, string mensaje);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAdministradorMultijugador/SalirJuego")]
        void SalirJuego(int idSala);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAdministradorMultijugador/SalirJuego")]
        System.Threading.Tasks.Task SalirJuegoAsync(int idSala);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdministradorMultijugador/ObtenerFondo", ReplyAction="http://tempuri.org/IAdministradorMultijugador/ObtenerFondoResponse")]
        string ObtenerFondo(int idSala);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdministradorMultijugador/ObtenerFondo", ReplyAction="http://tempuri.org/IAdministradorMultijugador/ObtenerFondoResponse")]
        System.Threading.Tasks.Task<string> ObtenerFondoAsync(int idSala);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAdministradorMultijugador/AsignarFicha")]
        void AsignarFicha(int idSala, MessageService.Ficha ficha);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAdministradorMultijugador/AsignarFicha")]
        System.Threading.Tasks.Task AsignarFichaAsync(int idSala, MessageService.Ficha ficha);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAdministradorMultijugador/RecibirTiro")]
        void RecibirTiro(int idSala, int numDado);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAdministradorMultijugador/RecibirTiro")]
        System.Threading.Tasks.Task RecibirTiroAsync(int idSala, int numDado);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAdministradorMultijugadorCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAdministradorMultijugador/RecibirMensajeLobby")]
        void RecibirMensajeLobby(string mensaje);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAdministradorMultijugador/RecibirMensajeMiembroLobby")]
        void RecibirMensajeMiembroLobby(bool entrada, string apodo);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAdministradorMultijugador/EntrarJuego")]
        void EntrarJuego();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAdministradorMultijugador/RecibirMensaje")]
        void RecibirMensaje(string mensaje);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAdministradorMultijugador/RecibirMensajeMiembro")]
        void RecibirMensajeMiembro(bool entrada, string apodo);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAdministradorMultijugador/ElegirFicha")]
        void ElegirFicha(string apodo);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAdministradorMultijugador/MostrarFichaElegida")]
        void MostrarFichaElegida(MessageService.Ficha ficha, int ordenJugador);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAdministradorMultijugador/Tirar")]
        void Tirar(string apodo);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAdministradorMultijugador/MostrarTiro")]
        void MostrarTiro(int ordenJugador, int posicion);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAdministradorMultijugadorChannel : MessageServiceTests1.ServiceReference1.IAdministradorMultijugador, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AdministradorMultijugadorClient : System.ServiceModel.DuplexClientBase<MessageServiceTests1.ServiceReference1.IAdministradorMultijugador>, MessageServiceTests1.ServiceReference1.IAdministradorMultijugador {
        
        public AdministradorMultijugadorClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public AdministradorMultijugadorClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public AdministradorMultijugadorClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AdministradorMultijugadorClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AdministradorMultijugadorClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public int CrearSala(MessageService.Sala sala) {
            return base.Channel.CrearSala(sala);
        }
        
        public System.Threading.Tasks.Task<int> CrearSalaAsync(MessageService.Sala sala) {
            return base.Channel.CrearSalaAsync(sala);
        }
        
        public MessageService.Sala[] ConsultarSalasDisponibles() {
            return base.Channel.ConsultarSalasDisponibles();
        }
        
        public System.Threading.Tasks.Task<MessageService.Sala[]> ConsultarSalasDisponiblesAsync() {
            return base.Channel.ConsultarSalasDisponiblesAsync();
        }
        
        public string[] ConsultarJugadoresSala(int idSala) {
            return base.Channel.ConsultarJugadoresSala(idSala);
        }
        
        public System.Threading.Tasks.Task<string[]> ConsultarJugadoresSalaAsync(int idSala) {
            return base.Channel.ConsultarJugadoresSalaAsync(idSala);
        }
        
        public void UnirseSala(int idSala, MessageService.Jugador jugador) {
            base.Channel.UnirseSala(idSala, jugador);
        }
        
        public System.Threading.Tasks.Task UnirseSalaAsync(int idSala, MessageService.Jugador jugador) {
            return base.Channel.UnirseSalaAsync(idSala, jugador);
        }
        
        public bool ValidarSala(int idSala) {
            return base.Channel.ValidarSala(idSala);
        }
        
        public System.Threading.Tasks.Task<bool> ValidarSalaAsync(int idSala) {
            return base.Channel.ValidarSalaAsync(idSala);
        }
        
        public void EnviarMensaje(int idSala, string mensaje) {
            base.Channel.EnviarMensaje(idSala, mensaje);
        }
        
        public System.Threading.Tasks.Task EnviarMensajeAsync(int idSala, string mensaje) {
            return base.Channel.EnviarMensajeAsync(idSala, mensaje);
        }
        
        public void SalirChat(int idSala) {
            base.Channel.SalirChat(idSala);
        }
        
        public System.Threading.Tasks.Task SalirChatAsync(int idSala) {
            return base.Channel.SalirChatAsync(idSala);
        }
        
        public void IniciarJuego(int idSala) {
            base.Channel.IniciarJuego(idSala);
        }
        
        public System.Threading.Tasks.Task IniciarJuegoAsync(int idSala) {
            return base.Channel.IniciarJuegoAsync(idSala);
        }
        
        public void UnirseJuego(int idSala, MessageService.Jugador jugador) {
            base.Channel.UnirseJuego(idSala, jugador);
        }
        
        public System.Threading.Tasks.Task UnirseJuegoAsync(int idSala, MessageService.Jugador jugador) {
            return base.Channel.UnirseJuegoAsync(idSala, jugador);
        }
        
        public void EnviarMensajeJuego(int idSala, string mensaje) {
            base.Channel.EnviarMensajeJuego(idSala, mensaje);
        }
        
        public System.Threading.Tasks.Task EnviarMensajeJuegoAsync(int idSala, string mensaje) {
            return base.Channel.EnviarMensajeJuegoAsync(idSala, mensaje);
        }
        
        public void SalirJuego(int idSala) {
            base.Channel.SalirJuego(idSala);
        }
        
        public System.Threading.Tasks.Task SalirJuegoAsync(int idSala) {
            return base.Channel.SalirJuegoAsync(idSala);
        }
        
        public string ObtenerFondo(int idSala) {
            return base.Channel.ObtenerFondo(idSala);
        }
        
        public System.Threading.Tasks.Task<string> ObtenerFondoAsync(int idSala) {
            return base.Channel.ObtenerFondoAsync(idSala);
        }
        
        public void AsignarFicha(int idSala, MessageService.Ficha ficha) {
            base.Channel.AsignarFicha(idSala, ficha);
        }
        
        public System.Threading.Tasks.Task AsignarFichaAsync(int idSala, MessageService.Ficha ficha) {
            return base.Channel.AsignarFichaAsync(idSala, ficha);
        }
        
        public void RecibirTiro(int idSala, int numDado) {
            base.Channel.RecibirTiro(idSala, numDado);
        }
        
        public System.Threading.Tasks.Task RecibirTiroAsync(int idSala, int numDado) {
            return base.Channel.RecibirTiroAsync(idSala, numDado);
        }
    }
}
